{
    "docs": [
        {
            "location": "/",
            "text": "Open Water Foundation Learn Python Documentation\n\n\nIntroduction\n\n\nThis documentation provides an overview of important Python concepts, with best practices\nand working examples.  The documentation has been created by the Open Water Foundation to facilitate our\nwork and is being made available in the hopes taht it also helps others.\n\n\nIf you are reading this documentation, you have likely already decided that Python is the language that\nyou want to use for programming.  It is assumed that you have a basic understanding of programming and\nthe Python language.  There are other sources of information about Python.  This documentation focuses\non practical issues that, if handled well, will minimize frustration and increase the efficiency of\nyour software development.\n\n\nThis documentation is a work in progress and will contain notes for inserts for awhile until time can\nbe devoted to filling in blanks.\n\n\nDocumentation Organization\n\n\nThe documentation is organized in the order of basic concepts and steps needed to build a Python program.\nAs time allows, additional sections will be added for more advanced topics such as use of useful Python\nAPI libraries for water resources.",
            "title": "Home"
        },
        {
            "location": "/#open-water-foundation-learn-python-documentation",
            "text": "",
            "title": "Open Water Foundation Learn Python Documentation"
        },
        {
            "location": "/#introduction",
            "text": "This documentation provides an overview of important Python concepts, with best practices\nand working examples.  The documentation has been created by the Open Water Foundation to facilitate our\nwork and is being made available in the hopes taht it also helps others.  If you are reading this documentation, you have likely already decided that Python is the language that\nyou want to use for programming.  It is assumed that you have a basic understanding of programming and\nthe Python language.  There are other sources of information about Python.  This documentation focuses\non practical issues that, if handled well, will minimize frustration and increase the efficiency of\nyour software development.  This documentation is a work in progress and will contain notes for inserts for awhile until time can\nbe devoted to filling in blanks.",
            "title": "Introduction"
        },
        {
            "location": "/#documentation-organization",
            "text": "The documentation is organized in the order of basic concepts and steps needed to build a Python program.\nAs time allows, additional sections will be added for more advanced topics such as use of useful Python\nAPI libraries for water resources.",
            "title": "Documentation Organization"
        },
        {
            "location": "/about/",
            "text": "About\n\n\nOpen Water Foundation\n\n\nThe Open Water Foundation (\nopenwaterfoundation.org\n) is a social enterprise\n501(c)3 nonprofit that focuses on developing and supporting open source software to make better\ndecisions about water resources.  We have developed training modules for staff, including student interns,\nin order to streamline education about technologies and software development tools.  We make these\nmaterials available to the public to facilitate learning by others, including STEM educators and students.\nContents of training modules will be improved over time based on feedback from use.\n\n\nOWF Learn Python\n\n\nThe OWF Learn Python materials focus on core concepts that are important to developing robust Python software\nfor water resources problems.  These materials will be enhanced over time to reflect a greater breadth and depth\n\n\nLicense\n\n\nThe OWF Learn Python website content and examples are licensed under the\n\nCreative Commons Attribution-NonCommercial-ShareAlike 4.0 International License\n.\n\n\nSource Repository on GitHub\n\n\nThe source files for this documentation are maintained in a GitHub repository: \nowf-learn-python\n\n\nThe GitHub Pages URL for the project is:  \nOWF Learn Python\n.\n\n\nMkDocs\n\n\nThis documentation is prepared using MkDocs.\nFor full MkDocs documentation visit \nmkdocs.org\n.",
            "title": "About"
        },
        {
            "location": "/about/#about",
            "text": "",
            "title": "About"
        },
        {
            "location": "/about/#open-water-foundation",
            "text": "The Open Water Foundation ( openwaterfoundation.org ) is a social enterprise\n501(c)3 nonprofit that focuses on developing and supporting open source software to make better\ndecisions about water resources.  We have developed training modules for staff, including student interns,\nin order to streamline education about technologies and software development tools.  We make these\nmaterials available to the public to facilitate learning by others, including STEM educators and students.\nContents of training modules will be improved over time based on feedback from use.",
            "title": "Open Water Foundation"
        },
        {
            "location": "/about/#owf-learn-python",
            "text": "The OWF Learn Python materials focus on core concepts that are important to developing robust Python software\nfor water resources problems.  These materials will be enhanced over time to reflect a greater breadth and depth",
            "title": "OWF Learn Python"
        },
        {
            "location": "/about/#license",
            "text": "The OWF Learn Python website content and examples are licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License .",
            "title": "License"
        },
        {
            "location": "/about/#source-repository-on-github",
            "text": "The source files for this documentation are maintained in a GitHub repository:  owf-learn-python  The GitHub Pages URL for the project is:   OWF Learn Python .",
            "title": "Source Repository on GitHub"
        },
        {
            "location": "/about/#mkdocs",
            "text": "This documentation is prepared using MkDocs.\nFor full MkDocs documentation visit  mkdocs.org .",
            "title": "MkDocs"
        },
        {
            "location": "/install-python/",
            "text": "Install Python\n\n\nPython can be downloaded and installed from the Python website (\npython.org/downloads\n).\nIn general, you should choose the latest 2.x or 3.x version, and the choice may depend on integration with an existing environment.\nFor example, an important application may have been developed in one version or the other.\nTo determine what version of Python is already installed, open a command shell in the preferred computer operating system\n(Cygwin, Linux, or Windows), and check for an installed and default version:\n\n\n$ python --version\nPython 2.7.2\n\n\n\n\nEven if nothing is listed, Python may still be installed on the system, but most likely not, because generally at least one installed\nversion will be the default and will be included in the \nPATH\n environment variable.  Refer to the following sections for\ndifferences between operating systems.\n\n\nAny changes to the Python installation environment, such as installing third-party packages, will install into the Python software file\nlocation based on the version of Python that was configured and run in the first place.  Be careful when working on a system that includes\nmultiple Python versions because care needs to be taken to install components for the correct version.\n\n\nBundled Installations\n\n\nPython may be distributed with software frameworks that depend on Python and need to control its installation so as to\nnot break the framework.\nBundled versions of Python are generally not configured as the default installation on a system and often require that a startup script\nis run to configure the Python environment.  Examples of bundled Python distributions include:\n\n\n\n\nEsri ArcGIS Geographic Information System ().  On Windows and ArcGIS 10.4, Python is installed in the C:\\Python27 folder and includes C:\\Python27\\ArcGIS10.4.\nThe ArcGIS software provides configuration tools to select the Python that is used.\n\n\nQGIS (\nhttps://www.qgis.org/en/site/forusers/download.html\n) - open source Geographic Information System\n(for example Python may be installed in the C:\\OSGeo4W64\\apps\\Python27 folder and the Python environment is initialized by running C:\\OSGeo4W64\\bin\\python.exe)\n\n\n\n\nCygwin Installation\n\n\nPython for Cygwin (\nhttps://cygwin.com/install.html\n) is installed by selecting the Python interpreter in the install package listing.\nThe Python program is installed as /usr/bin/python or /usr/bin/python3 and supporting files are installed in /usr/lib/Python2.7/ and /usr/lib/Python3.4/.\nThe latest supported Python for each major version is installed when the Cygwin installer is run.\n\n\nLinux Installation\n\n\nPython for Linux is installed by following the instructions on the Python download page.\nThe Python program is installed as /usr/bin/python or /usr/bin/python3 and supporting files are installed in /usr/lib/Python2.7/ and /usr/lib/Python3.4/.\n\n\nWindows Installation\n\n\nPython for Linux is installed by following the instructions on the Python download page.\nPython will install in the top-level folder C:\\Python27 or C:\\Python34, for example.\nThis allows the desired version of Python to be used based on component dependencies.\nIn general you will want to install a recent version (in the 2 or 3 major version) and stick with that until there is a reason to change,\nor you have time to upgrade and ensure that third-part components are also updated.\n\n\nInstall pip (or Other Package Installer)\n\n\nThe pip software is used to install Python packages and is the preferred installation tool since older tools such as easy_install\ndo not support current conventions.  Therefore, in order to install third-party packages, install pip first.  To check for whether pip is already installed:\n\n\n$ pip --version\n\n\n\n\nIf not installed, install with:\n\n\n$ python -m ensurepip\n\n\n\n\nInstall Third-party Packages\n\n\nThird party packages typically have their own websites with installation instructions.  Follow those instructions within the cofigured\nPython environment that is to receive the installation.  If necessary, check the Python version first to ensure compatibility with the\nmodule.\n\n\nCreate a Script to Configure the Python Environment\n\n\nIn many cases, Python scripts can be run using the default Python that is recognized for an operating system (often the last one that was installed\nbecause the installation procedure will update the \nPATH\n environment variable).  However, it may be\nappropriate to specify a different version for a task.  In any case, it may make sense to create a script to run the Python program so that the user does not\nneed to remember command-line syntax.  The example below runs a Python program on Cygwin/Linux.\nA similar .bat file could be created for Windows, in which case the \nPATH\n could be changed to specify the preferred Python at the start of the \nPATH\n.\nThe following environment variables control the Python execution environment:\n\n\n\n\n\n\nPYTHONPATH\n - tells the Python interpreter where to locate the module files imported into a Python program.\nIt should include the Python source library folder and the folders containing Python source code.  This variable may be set by the installer.\n\n\n\n\n\n\nPYTHONSTARTUP\n - specifies the path to an initialization file containing Python code that is executed every time the interpreter starts up.\n\n\n\n\n\n\nIt may be helpful to understand the startup environment.  Run the following Python program to print environment information.\n\n\n# Print PYTHONPATH folders\nimport sys\nprint sys.path\n\n\n\n\nExample output from running \npython\n on Cygwin and executing the above is:\n\n\n$ python\nPython 2.7.10 (default, Jun  1 2015, 18:05:38)\n[GCC 4.9.2] on cygwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import sys\n>>> print sys.path\n['', '/usr/lib/python2.7/site-packages/logilab_common-0.62.0-py2.7.egg', '/usr/lib/python27.zip', '/usr/lib/python2.7', '/usr/lib/python2.7/plat-cygwin', '/usr/lib/python2.7/lib-tk', '/usr/lib/python2.7/lib-old', '/usr/lib/python2.7/lib-dynload', '/usr/lib/python2.7/site-packages']\n>>> quit()\n\n\n\n\n\nFrom the above it can be seen that the supporting library files are installed in /usr/lib/python2.7.\n\n\nA simple configuration/run script may be similar to the following.\n\n\n#!/bin/bash\n#\n# Specify the Python interpreter to run\nset PYTHON=/usr/sbin/python3\n# Set the PYTHONPATH so that third party libraries can be found in the installation folder for the specific Python version:\nset PYTHONPATH=/some/new/path:$PYTHONPATH\n# Now run the python script and pass command line parameters\n# - need to make sure file is found, perhaps by using absolute path or path from $HOME\n%PYTHON% hello-world.py $*\n\n\n\n\n\nwhere the hello-world.py file contains:\n\n\nprint(\"Hello world\")\n\n\n\n\nor, to use built-in system functionality to run the python3 interpreter automatically, which may be appropriate for simple scripts:\n\n\n#!/usre/bin/python3\n\nprint(\"Hello world\")\n\n\n\n\nInstall Interactive Development Environment\n\n\nAn Interactive Development Environment (IDE) is helpful for development because it provides an integrated edit/run/test/build/deploy environment.\nThere are many Python developer environments.  The following are several that may be appropriate.  It is important to recognize the impacts that an IDE\nwill have on file structure, project files committed to repository, etc.  Other developers may use a different tool that will introduce other artifacts\ninto the development environment.\n\n\n\n\n\n\nSimple text editor and command line.  This is the default case and may be appropriate especially when troubleshooting a program on a remote environment\nwhere full developer environment cannot be installed.\n\n\n\n\n\n\nIDLE - distributed with Python.  Start by running \nidle\n on the command line.\n\n\n\n\n\n\nPyCharm\n - Integrated Python development environment with commerical and community editions.\n\n\n\n\n\n\nWingIDE\n - commercial product.\n\n\n\n\n\n\nSublime\n - text editor with features to supporty Python projects.\n\n\n\n\n\n\nEclipse PyDev\n - Python plugin for Eclipse.",
            "title": "Install and Configure Python"
        },
        {
            "location": "/install-python/#install-python",
            "text": "Python can be downloaded and installed from the Python website ( python.org/downloads ).\nIn general, you should choose the latest 2.x or 3.x version, and the choice may depend on integration with an existing environment.\nFor example, an important application may have been developed in one version or the other.\nTo determine what version of Python is already installed, open a command shell in the preferred computer operating system\n(Cygwin, Linux, or Windows), and check for an installed and default version:  $ python --version\nPython 2.7.2  Even if nothing is listed, Python may still be installed on the system, but most likely not, because generally at least one installed\nversion will be the default and will be included in the  PATH  environment variable.  Refer to the following sections for\ndifferences between operating systems.  Any changes to the Python installation environment, such as installing third-party packages, will install into the Python software file\nlocation based on the version of Python that was configured and run in the first place.  Be careful when working on a system that includes\nmultiple Python versions because care needs to be taken to install components for the correct version.",
            "title": "Install Python"
        },
        {
            "location": "/install-python/#bundled-installations",
            "text": "Python may be distributed with software frameworks that depend on Python and need to control its installation so as to\nnot break the framework.\nBundled versions of Python are generally not configured as the default installation on a system and often require that a startup script\nis run to configure the Python environment.  Examples of bundled Python distributions include:   Esri ArcGIS Geographic Information System ().  On Windows and ArcGIS 10.4, Python is installed in the C:\\Python27 folder and includes C:\\Python27\\ArcGIS10.4.\nThe ArcGIS software provides configuration tools to select the Python that is used.  QGIS ( https://www.qgis.org/en/site/forusers/download.html ) - open source Geographic Information System\n(for example Python may be installed in the C:\\OSGeo4W64\\apps\\Python27 folder and the Python environment is initialized by running C:\\OSGeo4W64\\bin\\python.exe)",
            "title": "Bundled Installations"
        },
        {
            "location": "/install-python/#cygwin-installation",
            "text": "Python for Cygwin ( https://cygwin.com/install.html ) is installed by selecting the Python interpreter in the install package listing.\nThe Python program is installed as /usr/bin/python or /usr/bin/python3 and supporting files are installed in /usr/lib/Python2.7/ and /usr/lib/Python3.4/.\nThe latest supported Python for each major version is installed when the Cygwin installer is run.",
            "title": "Cygwin Installation"
        },
        {
            "location": "/install-python/#linux-installation",
            "text": "Python for Linux is installed by following the instructions on the Python download page.\nThe Python program is installed as /usr/bin/python or /usr/bin/python3 and supporting files are installed in /usr/lib/Python2.7/ and /usr/lib/Python3.4/.",
            "title": "Linux Installation"
        },
        {
            "location": "/install-python/#windows-installation",
            "text": "Python for Linux is installed by following the instructions on the Python download page.\nPython will install in the top-level folder C:\\Python27 or C:\\Python34, for example.\nThis allows the desired version of Python to be used based on component dependencies.\nIn general you will want to install a recent version (in the 2 or 3 major version) and stick with that until there is a reason to change,\nor you have time to upgrade and ensure that third-part components are also updated.",
            "title": "Windows Installation"
        },
        {
            "location": "/install-python/#install-pip-or-other-package-installer",
            "text": "The pip software is used to install Python packages and is the preferred installation tool since older tools such as easy_install\ndo not support current conventions.  Therefore, in order to install third-party packages, install pip first.  To check for whether pip is already installed:  $ pip --version  If not installed, install with:  $ python -m ensurepip",
            "title": "Install pip (or Other Package Installer)"
        },
        {
            "location": "/install-python/#install-third-party-packages",
            "text": "Third party packages typically have their own websites with installation instructions.  Follow those instructions within the cofigured\nPython environment that is to receive the installation.  If necessary, check the Python version first to ensure compatibility with the\nmodule.",
            "title": "Install Third-party Packages"
        },
        {
            "location": "/install-python/#create-a-script-to-configure-the-python-environment",
            "text": "In many cases, Python scripts can be run using the default Python that is recognized for an operating system (often the last one that was installed\nbecause the installation procedure will update the  PATH  environment variable).  However, it may be\nappropriate to specify a different version for a task.  In any case, it may make sense to create a script to run the Python program so that the user does not\nneed to remember command-line syntax.  The example below runs a Python program on Cygwin/Linux.\nA similar .bat file could be created for Windows, in which case the  PATH  could be changed to specify the preferred Python at the start of the  PATH .\nThe following environment variables control the Python execution environment:    PYTHONPATH  - tells the Python interpreter where to locate the module files imported into a Python program.\nIt should include the Python source library folder and the folders containing Python source code.  This variable may be set by the installer.    PYTHONSTARTUP  - specifies the path to an initialization file containing Python code that is executed every time the interpreter starts up.    It may be helpful to understand the startup environment.  Run the following Python program to print environment information.  # Print PYTHONPATH folders\nimport sys\nprint sys.path  Example output from running  python  on Cygwin and executing the above is:  $ python\nPython 2.7.10 (default, Jun  1 2015, 18:05:38)\n[GCC 4.9.2] on cygwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import sys\n>>> print sys.path\n['', '/usr/lib/python2.7/site-packages/logilab_common-0.62.0-py2.7.egg', '/usr/lib/python27.zip', '/usr/lib/python2.7', '/usr/lib/python2.7/plat-cygwin', '/usr/lib/python2.7/lib-tk', '/usr/lib/python2.7/lib-old', '/usr/lib/python2.7/lib-dynload', '/usr/lib/python2.7/site-packages']\n>>> quit()  From the above it can be seen that the supporting library files are installed in /usr/lib/python2.7.  A simple configuration/run script may be similar to the following.  #!/bin/bash\n#\n# Specify the Python interpreter to run\nset PYTHON=/usr/sbin/python3\n# Set the PYTHONPATH so that third party libraries can be found in the installation folder for the specific Python version:\nset PYTHONPATH=/some/new/path:$PYTHONPATH\n# Now run the python script and pass command line parameters\n# - need to make sure file is found, perhaps by using absolute path or path from $HOME\n%PYTHON% hello-world.py $*  where the hello-world.py file contains:  print(\"Hello world\")  or, to use built-in system functionality to run the python3 interpreter automatically, which may be appropriate for simple scripts:  #!/usre/bin/python3\n\nprint(\"Hello world\")",
            "title": "Create a Script to Configure the Python Environment"
        },
        {
            "location": "/install-python/#install-interactive-development-environment",
            "text": "An Interactive Development Environment (IDE) is helpful for development because it provides an integrated edit/run/test/build/deploy environment.\nThere are many Python developer environments.  The following are several that may be appropriate.  It is important to recognize the impacts that an IDE\nwill have on file structure, project files committed to repository, etc.  Other developers may use a different tool that will introduce other artifacts\ninto the development environment.    Simple text editor and command line.  This is the default case and may be appropriate especially when troubleshooting a program on a remote environment\nwhere full developer environment cannot be installed.    IDLE - distributed with Python.  Start by running  idle  on the command line.    PyCharm  - Integrated Python development environment with commerical and community editions.    WingIDE  - commercial product.    Sublime  - text editor with features to supporty Python projects.    Eclipse PyDev  - Python plugin for Eclipse.",
            "title": "Install Interactive Development Environment"
        },
        {
            "location": "/run-python-program/",
            "text": "Running a Python Program\n\n\nSpecify Python Interpreter\n\n\nPython programs with source code in files with .py extension\ncan be compiled, but for general purpose use and transparency are distributed as text in the original files\nA Python program is run by specifying the main Python program filename as the first commmand line parameter to the interpreter:\n\n\npython hello-world.py\n\n\n\n\nwhere the hello-world.py file contains:\n\n\nprint(\"Hello world\")\n\n\n\n\nMain Entry Point in Python Program\n\n\nThe interpreter will execute the Python program from top to bottom.  If the code does not contain any functions and simply \ncontains Python commands, then those commands are executed in sequence.\nThis is appropriate for very simple programs or modules;\nhowever, in most cases the program will be complex enough to require functions.\n\n\nWhen the Python interpreter reads a source file, it defines a few special variables.  If the interpreter is running the program\nas the main file (as specified on the command line when starting Python), the interpreter sets a special \n__name__\n variable\nto have a value of \"__main__\".  If the module is imported and executed, then \n__name__\n is set to the module name.\nThis allows the following syntax to be used in the program file:\n\n\ndef main():\n    '''\n    Main program...\n    '''\n    # The following are not required...just an example\n    # Parse command line parameters\n    parseArgs() \n    # Initialize for run\n    initialize()\n    # Insert some logic here if not handled in called function\n    # Close down\n    shutdown()\n    return\n\n\nif ( __name__ == \"__main__\" ):\n    # Run the main function\n    main()\n\n\n\n\nGraceful Exit\n\n\nNeed to discuss here graceful exit so that calling program can check the exit status for success or failure.",
            "title": "Running the Python Program"
        },
        {
            "location": "/run-python-program/#running-a-python-program",
            "text": "",
            "title": "Running a Python Program"
        },
        {
            "location": "/run-python-program/#specify-python-interpreter",
            "text": "Python programs with source code in files with .py extension\ncan be compiled, but for general purpose use and transparency are distributed as text in the original files\nA Python program is run by specifying the main Python program filename as the first commmand line parameter to the interpreter:  python hello-world.py  where the hello-world.py file contains:  print(\"Hello world\")",
            "title": "Specify Python Interpreter"
        },
        {
            "location": "/run-python-program/#main-entry-point-in-python-program",
            "text": "The interpreter will execute the Python program from top to bottom.  If the code does not contain any functions and simply \ncontains Python commands, then those commands are executed in sequence.\nThis is appropriate for very simple programs or modules;\nhowever, in most cases the program will be complex enough to require functions.  When the Python interpreter reads a source file, it defines a few special variables.  If the interpreter is running the program\nas the main file (as specified on the command line when starting Python), the interpreter sets a special  __name__  variable\nto have a value of \"__main__\".  If the module is imported and executed, then  __name__  is set to the module name.\nThis allows the following syntax to be used in the program file:  def main():\n    '''\n    Main program...\n    '''\n    # The following are not required...just an example\n    # Parse command line parameters\n    parseArgs() \n    # Initialize for run\n    initialize()\n    # Insert some logic here if not handled in called function\n    # Close down\n    shutdown()\n    return\n\n\nif ( __name__ == \"__main__\" ):\n    # Run the main function\n    main()",
            "title": "Main Entry Point in Python Program"
        },
        {
            "location": "/run-python-program/#graceful-exit",
            "text": "Need to discuss here graceful exit so that calling program can check the exit status for success or failure.",
            "title": "Graceful Exit"
        },
        {
            "location": "/programming-basics/",
            "text": "Python Programming Basics\n\n\nThe Python language provides features common to many languages and allows add-on modules to be written to provide more specific functionality.\nPython 2 was used for many years and is still in use.  Python 3 is newer and is being phased in as developers update their code.\n\n\nProgram Files and Modules\n\n\nPython program files have the file extension .py.\nPython files correspond to modules that can have a hierarchical package naming convention.\nPython files can include built-in Python language and calls to built-in modules, and can also call add-on modules.\n\n\nLanguage Reference\n\n\nThe following resources provide an overview of the language:\n\n\n\n\nPython 2 Documentation\n\n\nPython 3 Documentation\n\n\nW3 Resource Python Tutorial",
            "title": "Python Programming Basics"
        },
        {
            "location": "/programming-basics/#python-programming-basics",
            "text": "The Python language provides features common to many languages and allows add-on modules to be written to provide more specific functionality.\nPython 2 was used for many years and is still in use.  Python 3 is newer and is being phased in as developers update their code.",
            "title": "Python Programming Basics"
        },
        {
            "location": "/programming-basics/#program-files-and-modules",
            "text": "Python program files have the file extension .py.\nPython files correspond to modules that can have a hierarchical package naming convention.\nPython files can include built-in Python language and calls to built-in modules, and can also call add-on modules.",
            "title": "Program Files and Modules"
        },
        {
            "location": "/programming-basics/#language-reference",
            "text": "The following resources provide an overview of the language:   Python 2 Documentation  Python 3 Documentation  W3 Resource Python Tutorial",
            "title": "Language Reference"
        },
        {
            "location": "/best-practices/",
            "text": "Python Best Practices\n\n\nThe Python creator and developer community has over the years settled on best practices and styles for Python code.\nThere are cases where there is still disagreement but the following resources are helpful:\n\n\n\n\nStyle Guide for Python Code\n\n\n\n\nThis training documentation points out best practices for specific topics as appropriate.",
            "title": "Python Best Practices"
        },
        {
            "location": "/best-practices/#python-best-practices",
            "text": "The Python creator and developer community has over the years settled on best practices and styles for Python code.\nThere are cases where there is still disagreement but the following resources are helpful:   Style Guide for Python Code   This training documentation points out best practices for specific topics as appropriate.",
            "title": "Python Best Practices"
        },
        {
            "location": "/command-line-parameters/",
            "text": "Command Line Parameters\n\n\nThe Python interpreter can be run by specifying command line parameters (also called arguments).\nIn basic use, the first parameter is the name of the Python program file to run and subsequent parameters are data to pass to the program.\nParameters may also be specified prior to the program file name to control Python.  To see a full list of Python interpreter command paramameters,\nrun \npython -h\n or \npython --help\n.  For example \npython -v\n will run in verbose mode and \npython --version\n will print the version.\nRunning \npython -v helloworld.py\n will run the specified program in versbose mode.\n\n\nIt is customary to write programs to accept command line parameters to allow flexibility in running the program so that input is not\nhard-coded.  This takes more time but allows the program to be reused and combined with other programs to provide greater functionality.\n\n\nOperating System Shell\n\n\nEvery operating system offers a command line shell (or \"console\" or \"terminal\").  The operating system kernal runs continuously and manages processes,\nsome of which are transitory and some of which are \"services\" that start when the computer starts and run continuously.\nThe kernal starts a command shell program when requested.\n\n\nOn Windows, typical command shells are cmd.exe (shown in Start menu as \"Command Prompt\") and Windows PowerShell.  For this documentation, it is assumed\nthat cmd.exe is most often used and that batch files with *.bat filename extension are used to run Python programs.\nAfter starting, the Windows command shell will display a prompt such as the folder name (e.g., \nC:\\Users\\John\n).\nThe prompt can be modified by setting the \nPROMPT\n environment variable.\nFor example, see:  \nhttp://www.hanselman.com/blog/ABetterPROMPTForCMDEXEOrCoolPromptEnvironmentVariablesAndANiceTransparentMultiprompt.aspx\n.\n\n\nOn Cygwin and Linux, the \"bash\" command shell is often used, although other shells are available.\nAfter starting, the bash window will display the prompt (e.g., \n$\n, folder name, or other string), depending on the value of \nPS1\n, \nPS2\n, and \nPS3\n\nenvironment variables.  These environment variables can be set to create a customized shell, for example for a bundled software framework.\nSee the following for more information:  \nhttps://wiki.archlinux.org/index.php/Bash/Prompt_customization\n.\n\n\nOn Windows, the Windows Task Manager can be used to list running applications and will show \nCommand Prompt\n.\nOn Cygwin/Linux, the \nps\n command will list processes and the \nbash\n shell will be listed as \n/usr/bin/bash\n.\n\n\nThe command shell displays a prompt and then waits for user input, which is entered using the \nEnter\n key on the keyboard.\nTypically running the \nexit\n command causes the shell to exit (window will go away).\nThe text that is typed before \nEnter\n is parsed by the command shell, using spaces and tabs as whitespace between tokens.\nIf the first token is recognized as an internal command of the shell, it is executed without trying to run any other program.\nIn this case additional tokens may also be used to modify the behavior of the internal commmand.\n\n\nIf the first token is not recognized as an internal command of the shell, then the folders in the \nPATH\n environment variable are searched to find the program to run.\nOn Cygwin/Linux use \nwhich programName\n to determine whether a program is in the \nPATH\n.  On Windows, use \nwhere programName\n.\nYou need to know the name of the program that will be run.\nThe remaining tokens on the command line are passed to the called program, using whitespace characters to split the tokens.\nFor example, if the program specified after the command prompt is \npython --version\n, then the \npython\n program is called with \n--version\n as the first command line parameter.\nThe following considerations should be kept in mind:\n\n\n\n\n\n\nChained program calls\n - One program or script can call another.  In each case, the environment of the parent program provides environment variables to the called program.\nThis can impact the initial state of called programs.\n\n\n\n\n\n\nCommand line parameter expansion\n - The command shell provides standard variable expansion functionality using wildcard characters.\nFor example, for Cygwin/Linux the \nls a*\n command will list all files with \na\n as the first character.\nThis expansion by default occurs in the command shell before calling the program.\nIn other words, the called program does not see a command parameter of \na*\n but instead sees the expanded list of matching files.\nAnother expansion that occurs is to replace environment veriable references with the value of the environment variable.\nFor example, on Cygwin/Linux \nls $HOME\n will list the contents of the user's home directory.\nTo avoid expansion from happening, the wildcard character must be protected/escaped.  See the next two bullets.\n\n\n\n\n\n\nFilenames with spaces and backslashes.\nFilenames passed to a program that include spaces can be problematic because the command shell splits the name into multiple tokens.\nBaskslashes used in Windows can be problematic because the backslash is a special character that \"escapes\" the following character.\nFor example \n\\*\n can mean \"I want the literal asterisk character, not wildcard behavior\", but handling is different between operating systems.\nOne solution is to avoid using folders and filenames with spaces and as much as possible handle input filenames gracefully whether a\nPython program is run on Windows or Cygwin/Linux.\nSee the next bullet.\n\n\n\n\n\n\nProtecting from command parameter expansion and handling white space.\nOn Cygwin/Linux, single quotes around a command line parameter can be used to prevent the parameter from any expansion,\nand double quotes around a parameter will allow for expansion but treat the parameter as a single value when passed to the called program\n(space will be included in the parameter).  On Windows, double quotes around the parameter allow expansion and will keep spaces.\n\n\n\n\n\n\nCommand Line Parameter Standards\n\n\nWhen creating a Python program, it is best to use standard command line parameters.\nCommand line parameter standards are available but are typically very technical (see: \nhttp://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap12.html\n).\nA basic summary is as follows:\n\n\n\n\n\n\nUse Linux-style format for command parameters, which prefix parameters with dashes rather than Windows /.\nDashes are more universal and avoid confusion with path separators.\n\n\n\n\n\n\nIf the command parameter is a single character, use a single dash, for example to print the vesion:  \n-v\n.\n\n\n\n\n\n\nIf the command parameter is longer than a single character, use two dashes, for example to print the version:  \n--version\n.\n\n\n\n\n\n\nSpecify the value associated with a command line parameter using an equals sign, for example \n-inputFile=nameOfFile\n or as the following parameter \n-inputFile nameOfInputFile\n\n\n\n\n\n\nGetting the Value of Command Line Parameters (Basic)\n\n\nCommand line parameters are stored in an array \nsys.argv\n and can be printed using the following:\n\n\nimport sys\n\nfor arg in sys.argv:\n  print arg\n\n\n\n\nThe first argument (\narg[0]\n) contains the name of the Python file that is being run.  All other array values contain the command line\nparameters that were specified on the command line.  The \nsys.arg\n array can be manually processed to retrieve parameter values\nand set in variables; however, utility functions are available to do this work.  See the next section.\n\n\nGetting the Value of Command Line Parameters (Advanced)\n\n\nIt is generally best to create a standard command line parsing function that uses built-in Python capabilities.\nThe older getopt and newer argparse modules are distributed with Python and other modules are also available, for example:\n\nhttps://realpython.com/blog/python/comparing-python-command-line-parsing-libraries-argparse-docopt-click/\n.\n\n\nThe following are references for several options:\n\n\n\n\ngetopt Reference\n\n\nargparse Reference\n\n\nargparse 2 Tutorial\n\n\nargparse 3 Tutorial",
            "title": "Command Line Parameters"
        },
        {
            "location": "/command-line-parameters/#command-line-parameters",
            "text": "The Python interpreter can be run by specifying command line parameters (also called arguments).\nIn basic use, the first parameter is the name of the Python program file to run and subsequent parameters are data to pass to the program.\nParameters may also be specified prior to the program file name to control Python.  To see a full list of Python interpreter command paramameters,\nrun  python -h  or  python --help .  For example  python -v  will run in verbose mode and  python --version  will print the version.\nRunning  python -v helloworld.py  will run the specified program in versbose mode.  It is customary to write programs to accept command line parameters to allow flexibility in running the program so that input is not\nhard-coded.  This takes more time but allows the program to be reused and combined with other programs to provide greater functionality.",
            "title": "Command Line Parameters"
        },
        {
            "location": "/command-line-parameters/#operating-system-shell",
            "text": "Every operating system offers a command line shell (or \"console\" or \"terminal\").  The operating system kernal runs continuously and manages processes,\nsome of which are transitory and some of which are \"services\" that start when the computer starts and run continuously.\nThe kernal starts a command shell program when requested.  On Windows, typical command shells are cmd.exe (shown in Start menu as \"Command Prompt\") and Windows PowerShell.  For this documentation, it is assumed\nthat cmd.exe is most often used and that batch files with *.bat filename extension are used to run Python programs.\nAfter starting, the Windows command shell will display a prompt such as the folder name (e.g.,  C:\\Users\\John ).\nThe prompt can be modified by setting the  PROMPT  environment variable.\nFor example, see:   http://www.hanselman.com/blog/ABetterPROMPTForCMDEXEOrCoolPromptEnvironmentVariablesAndANiceTransparentMultiprompt.aspx .  On Cygwin and Linux, the \"bash\" command shell is often used, although other shells are available.\nAfter starting, the bash window will display the prompt (e.g.,  $ , folder name, or other string), depending on the value of  PS1 ,  PS2 , and  PS3 \nenvironment variables.  These environment variables can be set to create a customized shell, for example for a bundled software framework.\nSee the following for more information:   https://wiki.archlinux.org/index.php/Bash/Prompt_customization .  On Windows, the Windows Task Manager can be used to list running applications and will show  Command Prompt .\nOn Cygwin/Linux, the  ps  command will list processes and the  bash  shell will be listed as  /usr/bin/bash .  The command shell displays a prompt and then waits for user input, which is entered using the  Enter  key on the keyboard.\nTypically running the  exit  command causes the shell to exit (window will go away).\nThe text that is typed before  Enter  is parsed by the command shell, using spaces and tabs as whitespace between tokens.\nIf the first token is recognized as an internal command of the shell, it is executed without trying to run any other program.\nIn this case additional tokens may also be used to modify the behavior of the internal commmand.  If the first token is not recognized as an internal command of the shell, then the folders in the  PATH  environment variable are searched to find the program to run.\nOn Cygwin/Linux use  which programName  to determine whether a program is in the  PATH .  On Windows, use  where programName .\nYou need to know the name of the program that will be run.\nThe remaining tokens on the command line are passed to the called program, using whitespace characters to split the tokens.\nFor example, if the program specified after the command prompt is  python --version , then the  python  program is called with  --version  as the first command line parameter.\nThe following considerations should be kept in mind:    Chained program calls  - One program or script can call another.  In each case, the environment of the parent program provides environment variables to the called program.\nThis can impact the initial state of called programs.    Command line parameter expansion  - The command shell provides standard variable expansion functionality using wildcard characters.\nFor example, for Cygwin/Linux the  ls a*  command will list all files with  a  as the first character.\nThis expansion by default occurs in the command shell before calling the program.\nIn other words, the called program does not see a command parameter of  a*  but instead sees the expanded list of matching files.\nAnother expansion that occurs is to replace environment veriable references with the value of the environment variable.\nFor example, on Cygwin/Linux  ls $HOME  will list the contents of the user's home directory.\nTo avoid expansion from happening, the wildcard character must be protected/escaped.  See the next two bullets.    Filenames with spaces and backslashes.\nFilenames passed to a program that include spaces can be problematic because the command shell splits the name into multiple tokens.\nBaskslashes used in Windows can be problematic because the backslash is a special character that \"escapes\" the following character.\nFor example  \\*  can mean \"I want the literal asterisk character, not wildcard behavior\", but handling is different between operating systems.\nOne solution is to avoid using folders and filenames with spaces and as much as possible handle input filenames gracefully whether a\nPython program is run on Windows or Cygwin/Linux.\nSee the next bullet.    Protecting from command parameter expansion and handling white space.\nOn Cygwin/Linux, single quotes around a command line parameter can be used to prevent the parameter from any expansion,\nand double quotes around a parameter will allow for expansion but treat the parameter as a single value when passed to the called program\n(space will be included in the parameter).  On Windows, double quotes around the parameter allow expansion and will keep spaces.",
            "title": "Operating System Shell"
        },
        {
            "location": "/command-line-parameters/#command-line-parameter-standards",
            "text": "When creating a Python program, it is best to use standard command line parameters.\nCommand line parameter standards are available but are typically very technical (see:  http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap12.html ).\nA basic summary is as follows:    Use Linux-style format for command parameters, which prefix parameters with dashes rather than Windows /.\nDashes are more universal and avoid confusion with path separators.    If the command parameter is a single character, use a single dash, for example to print the vesion:   -v .    If the command parameter is longer than a single character, use two dashes, for example to print the version:   --version .    Specify the value associated with a command line parameter using an equals sign, for example  -inputFile=nameOfFile  or as the following parameter  -inputFile nameOfInputFile",
            "title": "Command Line Parameter Standards"
        },
        {
            "location": "/command-line-parameters/#getting-the-value-of-command-line-parameters-basic",
            "text": "Command line parameters are stored in an array  sys.argv  and can be printed using the following:  import sys\n\nfor arg in sys.argv:\n  print arg  The first argument ( arg[0] ) contains the name of the Python file that is being run.  All other array values contain the command line\nparameters that were specified on the command line.  The  sys.arg  array can be manually processed to retrieve parameter values\nand set in variables; however, utility functions are available to do this work.  See the next section.",
            "title": "Getting the Value of Command Line Parameters (Basic)"
        },
        {
            "location": "/command-line-parameters/#getting-the-value-of-command-line-parameters-advanced",
            "text": "It is generally best to create a standard command line parsing function that uses built-in Python capabilities.\nThe older getopt and newer argparse modules are distributed with Python and other modules are also available, for example: https://realpython.com/blog/python/comparing-python-command-line-parsing-libraries-argparse-docopt-click/ .  The following are references for several options:   getopt Reference  argparse Reference  argparse 2 Tutorial  argparse 3 Tutorial",
            "title": "Getting the Value of Command Line Parameters (Advanced)"
        },
        {
            "location": "/global-local-variables/",
            "text": "Global Versus Local Variables\n\n\nProgrammers often make the mistake of using global variables for data management.\nAlthough this may make sense in a simple program, global data will generally lead to maintenance issues as a program becomes more complex.\n\n\nThe Concept of Scope\n\n\nScope means the extent within a program that a variable is recognized.\nA global variable is recognized throughout the entire program.\nA variable that has scope within a function is only recognized in the function.\nThe extent of the scope depends on where and how a variable is declared.\n\n\nGlobal Variables\n\n\nA global variable in Python is declared at the top level of a module and not within any function.\nThe global variable will only be global within the module and not across modules.\nFor example:\n\n\nimport datetime\n\n# Global variable containing the current time\ncurrentTime = datetime.datetime.now()\n\ndef printCurrentTime():\n  '''Print the current time with default formatting.'''\n  print(\"Current time: \" + str(currentTime))\n  return\n\n# Now print the current time\nprintCurrentTime()\n\n\n\n\nIn the above example, the \ncurrentTime\n variable is recognized inside the \nprintCurrentTime\n function because it has global scope, and the output is:\n\n\nCurrent time : 2016-10-10 14:48:43.394564\n\n\n\n\nIt is often necessary to use global variables in programs to hold global state information such as the starting folder on the computer.\nHowever, called functions should not rely on the global variable and should instead use variables declared within the function or passed to the function.\n\n\nLocal Variables\n\n\nLocal variables are recognized in the scope that they were declared.  For example, the following illustrates how a local format string is used to format the current date.\n\n\nimport datetime\n\n# \ncurrentDateTime = datetime.datetime.now()\n\ndef printCurrentDate(currentDateTime2):\n  '''\n  Print the current date using YYYY-MM-DD format.\n\n  currentDateTime2 -- current date/time as Python datetime object.\n  '''\n  # Use the Python formatting features\n  print(\"Current date: %s-%s-%s\" % (currentDateTime2.year, currentDateTime2.month, currentDateTime2.day) )\n  return\n\n# Now print the current date\nprintCurrentDate(currentDateTime)\n\n\n\n\nOutput from the above is \nCurrent date: 2016-10-10\n.\nNote that in the above example the global variable name \ncurrentDateTime\n is different than the name \ncurrentDateTime2\nin the function parameter list.\nIf they were the same, the local variable would take precedence.\nIf a new declaration of a variable in a function should refer to the local variable, declare it as follows (otherwise \na\n will be local in the function).\nHowever, use of \nglobal\n is discouraged.\n\n\na = 0 # Global variable\ndef someFunction():\n  gobal a # Use the global variable rather than declaring a new local variable\n  a = 5\n  print(\"a=\"+str(a))\n\n\n\n\nBest Practices\n\n\nThe following are some best practices related to global data:\n\n\n\n\n\n\nTry to minimize the use of global data.\n\n\n\n\n\n\nIf global data do need to be used in a program, try to isolate to the main program, and then pass as parameters to functions.\nAn exception might be when command line parameters are passed, in which case the parse function may need to\noverride global variables with values that were specified on the command line.\n\n\n\n\n\n\nIf global data are needed in library modules, for example to store data to improve performance, encapsulate the data\nto minimize potential conflict with other code in the module.\n\n\n\n\n\n\nMinimize directly referencing global data in functions.  Pass the data into functions as parameters.\nThe exception is \"setter\" and \"getter\" functions that manipulate the global data.\n\n\n\n\n\n\nIf extensive data need to be passed to functions, consider using a class to group the data into an object.",
            "title": "Global vs. Local Variables"
        },
        {
            "location": "/global-local-variables/#global-versus-local-variables",
            "text": "Programmers often make the mistake of using global variables for data management.\nAlthough this may make sense in a simple program, global data will generally lead to maintenance issues as a program becomes more complex.",
            "title": "Global Versus Local Variables"
        },
        {
            "location": "/global-local-variables/#the-concept-of-scope",
            "text": "Scope means the extent within a program that a variable is recognized.\nA global variable is recognized throughout the entire program.\nA variable that has scope within a function is only recognized in the function.\nThe extent of the scope depends on where and how a variable is declared.",
            "title": "The Concept of Scope"
        },
        {
            "location": "/global-local-variables/#global-variables",
            "text": "A global variable in Python is declared at the top level of a module and not within any function.\nThe global variable will only be global within the module and not across modules.\nFor example:  import datetime\n\n# Global variable containing the current time\ncurrentTime = datetime.datetime.now()\n\ndef printCurrentTime():\n  '''Print the current time with default formatting.'''\n  print(\"Current time: \" + str(currentTime))\n  return\n\n# Now print the current time\nprintCurrentTime()  In the above example, the  currentTime  variable is recognized inside the  printCurrentTime  function because it has global scope, and the output is:  Current time : 2016-10-10 14:48:43.394564  It is often necessary to use global variables in programs to hold global state information such as the starting folder on the computer.\nHowever, called functions should not rely on the global variable and should instead use variables declared within the function or passed to the function.",
            "title": "Global Variables"
        },
        {
            "location": "/global-local-variables/#local-variables",
            "text": "Local variables are recognized in the scope that they were declared.  For example, the following illustrates how a local format string is used to format the current date.  import datetime\n\n# \ncurrentDateTime = datetime.datetime.now()\n\ndef printCurrentDate(currentDateTime2):\n  '''\n  Print the current date using YYYY-MM-DD format.\n\n  currentDateTime2 -- current date/time as Python datetime object.\n  '''\n  # Use the Python formatting features\n  print(\"Current date: %s-%s-%s\" % (currentDateTime2.year, currentDateTime2.month, currentDateTime2.day) )\n  return\n\n# Now print the current date\nprintCurrentDate(currentDateTime)  Output from the above is  Current date: 2016-10-10 .\nNote that in the above example the global variable name  currentDateTime  is different than the name  currentDateTime2 in the function parameter list.\nIf they were the same, the local variable would take precedence.\nIf a new declaration of a variable in a function should refer to the local variable, declare it as follows (otherwise  a  will be local in the function).\nHowever, use of  global  is discouraged.  a = 0 # Global variable\ndef someFunction():\n  gobal a # Use the global variable rather than declaring a new local variable\n  a = 5\n  print(\"a=\"+str(a))",
            "title": "Local Variables"
        },
        {
            "location": "/global-local-variables/#best-practices",
            "text": "The following are some best practices related to global data:    Try to minimize the use of global data.    If global data do need to be used in a program, try to isolate to the main program, and then pass as parameters to functions.\nAn exception might be when command line parameters are passed, in which case the parse function may need to\noverride global variables with values that were specified on the command line.    If global data are needed in library modules, for example to store data to improve performance, encapsulate the data\nto minimize potential conflict with other code in the module.    Minimize directly referencing global data in functions.  Pass the data into functions as parameters.\nThe exception is \"setter\" and \"getter\" functions that manipulate the global data.    If extensive data need to be passed to functions, consider using a class to group the data into an object.",
            "title": "Best Practices"
        },
        {
            "location": "/logging/",
            "text": "Logging\n\n\nLogging is an important feature of software and a practice of software developers that facilitates debugging and troubleshooting.\n\n\nLogging Overview\n\n\nLogging is the practice of writing messages to one or more output streams to record program progress and issues.\nOutput streams include standard output (stdout, the output window, or console),\nstandard error (stderr, similar to standard output but used for errors), and output file.\n\n\nLogging is implemented by utilizing the Python logging module, which collects messages from running code,\ndetermines whether the messages should be logged (based on logging configuration), and then directs the log messages to the\nproper output stream(s).\n\n\nLogging is an alternative to the built-in \nprint()\n function in Python, which prints to the console.\nHowever, printing to the console may be sufficient in some cases.\nOne issue with printing to the console is that it can greatly slow down the program due to using graphical resources.\nIf extensive logging is printed to the console, the output may need to be redirected to a file anyway because it exceeds the window scroll buffer\n(for example \npython script.py > output.log\n).\nConsequently, if the output needs to be redirected to a file, then a log file may as well be used.\n\n\nThe Basic Logging Tutorial mentioned below provides guidance for implenting logging.\n\n\nPython 2 Logging\n\n\nLogging in Python 2 occurs using the logging facility.  See the following:\n\n\n\n\nLogging API reference\n\n\nBasic Tutorial\n\n\nAdvanced Tutorial\n\n\nLogging Cookbook\n\n\n\n\nPython 3 Logging\n\n\nLogging in Python 3 occurs using the logging facility.  See the following:\n\n\n\n\nLogging API reference\n\n\nBasic Tutorial\n\n\nAdvanced Tutorial\n\n\nLogging Cookbook",
            "title": "Logging"
        },
        {
            "location": "/logging/#logging",
            "text": "Logging is an important feature of software and a practice of software developers that facilitates debugging and troubleshooting.",
            "title": "Logging"
        },
        {
            "location": "/logging/#logging-overview",
            "text": "Logging is the practice of writing messages to one or more output streams to record program progress and issues.\nOutput streams include standard output (stdout, the output window, or console),\nstandard error (stderr, similar to standard output but used for errors), and output file.  Logging is implemented by utilizing the Python logging module, which collects messages from running code,\ndetermines whether the messages should be logged (based on logging configuration), and then directs the log messages to the\nproper output stream(s).  Logging is an alternative to the built-in  print()  function in Python, which prints to the console.\nHowever, printing to the console may be sufficient in some cases.\nOne issue with printing to the console is that it can greatly slow down the program due to using graphical resources.\nIf extensive logging is printed to the console, the output may need to be redirected to a file anyway because it exceeds the window scroll buffer\n(for example  python script.py > output.log ).\nConsequently, if the output needs to be redirected to a file, then a log file may as well be used.  The Basic Logging Tutorial mentioned below provides guidance for implenting logging.",
            "title": "Logging Overview"
        },
        {
            "location": "/logging/#python-2-logging",
            "text": "Logging in Python 2 occurs using the logging facility.  See the following:   Logging API reference  Basic Tutorial  Advanced Tutorial  Logging Cookbook",
            "title": "Python 2 Logging"
        },
        {
            "location": "/logging/#python-3-logging",
            "text": "Logging in Python 3 occurs using the logging facility.  See the following:   Logging API reference  Basic Tutorial  Advanced Tutorial  Logging Cookbook",
            "title": "Python 3 Logging"
        },
        {
            "location": "/functions/",
            "text": "Functions\n\n\nIt is good practice to break code into functions that perform specific tasks.\nThis ensures that code logic is easier to understand and maintain.\n\n\nFunction Names\n\n\nCoding conventions vary between languages, programmers, and projects.\nThe Style Guide for Python Code provides guidance for function names:  \nhttps://www.python.org/dev/peps/pep-0008/#function-names\n.\n\n\nIn summary, use lowecase names with words separated by underscores.  Or, use \"camelCase\" but only if already in use.\nFor a new project, pick a style that is appropriate given other conventions and remain consistent.\n\n\nFunction Documentation\n\n\nRefer to the \nDocumentation\n section.\n\n\nOrder of Functions\n\n\nTo facilitate code review, functions should generally be alphabetized unless there is a reason to group/order differently.:w\n\n\nReturning Values From Functions\n\n\nPython, like other languages, has conventions for how variables are passed to functions, and whether those variables can be changed.\nArticles on the topic can be confusing, especially to beginning programmers,\nfor example:  \nhttp://www.python-course.eu/passing_arguments.php\n.\nTo simplify, keep the following in mind:\n\n\n\n\n\n\nMutable objects are those that can be modified.  For example, a list that is passed to the function can have items added in the function.\n\n\n\n\n\n\nImmutable objects (primitives like strings, numbers) cannot be modified and new copies are made inside the function.\nTherefore, a function that needs to return such objects will need to enclose the object in a mutable object like a list in the function parameters, or\nreturn the new immutable object(s) as the return value, a new list, tuple, etc.",
            "title": "Functions"
        },
        {
            "location": "/functions/#functions",
            "text": "It is good practice to break code into functions that perform specific tasks.\nThis ensures that code logic is easier to understand and maintain.",
            "title": "Functions"
        },
        {
            "location": "/functions/#function-names",
            "text": "Coding conventions vary between languages, programmers, and projects.\nThe Style Guide for Python Code provides guidance for function names:   https://www.python.org/dev/peps/pep-0008/#function-names .  In summary, use lowecase names with words separated by underscores.  Or, use \"camelCase\" but only if already in use.\nFor a new project, pick a style that is appropriate given other conventions and remain consistent.",
            "title": "Function Names"
        },
        {
            "location": "/functions/#function-documentation",
            "text": "Refer to the  Documentation  section.",
            "title": "Function Documentation"
        },
        {
            "location": "/functions/#order-of-functions",
            "text": "To facilitate code review, functions should generally be alphabetized unless there is a reason to group/order differently.:w",
            "title": "Order of Functions"
        },
        {
            "location": "/functions/#returning-values-from-functions",
            "text": "Python, like other languages, has conventions for how variables are passed to functions, and whether those variables can be changed.\nArticles on the topic can be confusing, especially to beginning programmers,\nfor example:   http://www.python-course.eu/passing_arguments.php .\nTo simplify, keep the following in mind:    Mutable objects are those that can be modified.  For example, a list that is passed to the function can have items added in the function.    Immutable objects (primitives like strings, numbers) cannot be modified and new copies are made inside the function.\nTherefore, a function that needs to return such objects will need to enclose the object in a mutable object like a list in the function parameters, or\nreturn the new immutable object(s) as the return value, a new list, tuple, etc.",
            "title": "Returning Values From Functions"
        },
        {
            "location": "/error-handling/",
            "text": "Error Handling\n\n\nError handling is one of the most important concepts in software development.\nErrors that are not handled will result in ungraceful software exits.\nErrors that are gracefully handled also need to be logged or otherwise made known to the user so that corrective action can occur.\nCorrections may include fixing bad program input or fixing a software bug.\n\n\nError handling can be implemented in various ways, with a few options described below.\nThe basic approach is to detect a problem, handle the problem, and return logic flow gracefully to calling code.\nIn some cases an error is fatal and the program should stop.\nIn other cases, the progam can continue, perhaps with notification to the user.\nThe degree of notification depends on whether the error is expected as normal behavior or is out of the range of normal conditions.\nFor example, it should be expected that code that processes files may encounter cases where files are missing.\n\n\nGood code recognizes the potential for errors and handles gracefully.\nThis may mean that a significant amount of code is devoted to checking input and implementing error handling.\nHowever, the alternative is unfriendly, unusable software.\nFor example, a function that processes a file should check for file existence and handle missing or mal-formatted files.\nA function that performs math operations should detect and handle division by zero.\nLeap years should be handled gracefully without generating errors in the first place, rather than having incomplete code that generates exceptions.\nThe programmer is not off the hook if they implement exception handling as described below - the error handling should provide useful feedback.\n\n\nFunction Return Status\n\n\nBasic error handling for functions includes using a return status to let calling code know whether the function was succesful.\nThis may be appropriate for basic functionality but is limited. Using exceptions as in the next section is generally more useful.\n\n\nFor example, a function might return an integer to indicate its status, with 0 meaning success and other values corresponding to error states.\nA function to remove a file might return 0 if the remove is successful, 1 if file did not exist, 2 if permissions did not allow removing, etc.\nThis form of error handling can become complex because errors have to be coded and decoded, with corresponding messages.\nOf course, a general message could be printed if the status is non-zero, but that may not be helpful.\n\n\nThis approach for error handling is often too limiting in many cases.  See the discussion of Exceptions for an alternative.\nHowever, many programming languages do utilize an exit status from the main program because inter-language error handling must rely on simple concepts\nlike a numerical exit status or a printed status string.\n\n\nExceptions\n\n\nExceptions are unexpected conditions that occur in the logic of a program.\nException objects are \"thrown\" by the Python interpreter when an issue is detected, and have a specific type.\nFor example, trying to use a number variable type when a string is expected may generate a TypeError.\nThe Exception occurs at a point in the software and \"travels up\" to the main program.  This is the \"Exception stack\" or call sequence\nthat is printed when Python detects that it cannot continue.\nExceptions are \"caught\" by type, at which time an appropriate action can be taken.\nIf an Exception type is not caught in one level of code, it will continue to travel up the stack until it is caught or the Python interpreter catches at the main level.\nExceptions objects have the same parent object \nException\n, which allows a cascading sequence of catches culminating with catching the most generic type.\nThe following illustrates a simple case where an exception is generated (thrown) and caught using the default exception handler (no specific exception type is caught).\n\n\ntry:\n  x = 1/0\nexcept:\n  print(\"Division by zero:)\n\n\n\n\n\nThe \ntry\n block code can be nested (exception handling inside of exception handling), used in loops, etc.\nThe exception can be handled by continuing a loop, returning from a function, throwing another exception, etc.,\nas appropriate for the code logic.  See the logging section below for guidance on error handling and logging approach.\n\n\nFor more information for Python 2, see:\n\n\n\n\nErrors and Exception\n.\n\n\nBuilt-in exceptions\n.\n\n\n\n\nFor Python 3, see:\n\n\n\n\nErrors and Exceptions\n\n\nBuilt-in Exceptions\n\n\n\n\nLogging Exceptions\n\n\nIf logging is implemented for the program, then exceptions should be loggged as warning or error messages.\nThis is particularly useful to allow the log file to be provided software developers so they can debug an issue.\nSee the following for information about logging exceptions:  \nhttps://www.loggly.com/blog/exceptional-logging-of-exceptions-in-python/\n\n\nIt is useful to print the exception stack trace.  See the following for information:\n\n\n\n\n\n\nPython 2 - \nhttps://docs.python.org/2/library/traceback.html\n\n\n\n\n\n\nPython 3 - \nhttps://docs.python.org/3/library/traceback.html\n\n\n\n\n\n\nAn example for how to print the exception stack trace is as follows\n(see \nhttp://stackoverflow.com/questions/5191830/best-way-to-log-a-python-exception\n):\n\n\nimport logging\ntry:\n    1/0\nexcept Exception as e:\n    logging.exception(\"Division by zero\")\n\n\n\n\nThe above \nlogging.exception\n call will print the stack trace whereas \nlogging.warning\n and \nlogging.error\n will print a simple message.",
            "title": "Error Handling"
        },
        {
            "location": "/error-handling/#error-handling",
            "text": "Error handling is one of the most important concepts in software development.\nErrors that are not handled will result in ungraceful software exits.\nErrors that are gracefully handled also need to be logged or otherwise made known to the user so that corrective action can occur.\nCorrections may include fixing bad program input or fixing a software bug.  Error handling can be implemented in various ways, with a few options described below.\nThe basic approach is to detect a problem, handle the problem, and return logic flow gracefully to calling code.\nIn some cases an error is fatal and the program should stop.\nIn other cases, the progam can continue, perhaps with notification to the user.\nThe degree of notification depends on whether the error is expected as normal behavior or is out of the range of normal conditions.\nFor example, it should be expected that code that processes files may encounter cases where files are missing.  Good code recognizes the potential for errors and handles gracefully.\nThis may mean that a significant amount of code is devoted to checking input and implementing error handling.\nHowever, the alternative is unfriendly, unusable software.\nFor example, a function that processes a file should check for file existence and handle missing or mal-formatted files.\nA function that performs math operations should detect and handle division by zero.\nLeap years should be handled gracefully without generating errors in the first place, rather than having incomplete code that generates exceptions.\nThe programmer is not off the hook if they implement exception handling as described below - the error handling should provide useful feedback.",
            "title": "Error Handling"
        },
        {
            "location": "/error-handling/#function-return-status",
            "text": "Basic error handling for functions includes using a return status to let calling code know whether the function was succesful.\nThis may be appropriate for basic functionality but is limited. Using exceptions as in the next section is generally more useful.  For example, a function might return an integer to indicate its status, with 0 meaning success and other values corresponding to error states.\nA function to remove a file might return 0 if the remove is successful, 1 if file did not exist, 2 if permissions did not allow removing, etc.\nThis form of error handling can become complex because errors have to be coded and decoded, with corresponding messages.\nOf course, a general message could be printed if the status is non-zero, but that may not be helpful.  This approach for error handling is often too limiting in many cases.  See the discussion of Exceptions for an alternative.\nHowever, many programming languages do utilize an exit status from the main program because inter-language error handling must rely on simple concepts\nlike a numerical exit status or a printed status string.",
            "title": "Function Return Status"
        },
        {
            "location": "/error-handling/#exceptions",
            "text": "Exceptions are unexpected conditions that occur in the logic of a program.\nException objects are \"thrown\" by the Python interpreter when an issue is detected, and have a specific type.\nFor example, trying to use a number variable type when a string is expected may generate a TypeError.\nThe Exception occurs at a point in the software and \"travels up\" to the main program.  This is the \"Exception stack\" or call sequence\nthat is printed when Python detects that it cannot continue.\nExceptions are \"caught\" by type, at which time an appropriate action can be taken.\nIf an Exception type is not caught in one level of code, it will continue to travel up the stack until it is caught or the Python interpreter catches at the main level.\nExceptions objects have the same parent object  Exception , which allows a cascading sequence of catches culminating with catching the most generic type.\nThe following illustrates a simple case where an exception is generated (thrown) and caught using the default exception handler (no specific exception type is caught).  try:\n  x = 1/0\nexcept:\n  print(\"Division by zero:)  The  try  block code can be nested (exception handling inside of exception handling), used in loops, etc.\nThe exception can be handled by continuing a loop, returning from a function, throwing another exception, etc.,\nas appropriate for the code logic.  See the logging section below for guidance on error handling and logging approach.  For more information for Python 2, see:   Errors and Exception .  Built-in exceptions .   For Python 3, see:   Errors and Exceptions  Built-in Exceptions",
            "title": "Exceptions"
        },
        {
            "location": "/error-handling/#logging-exceptions",
            "text": "If logging is implemented for the program, then exceptions should be loggged as warning or error messages.\nThis is particularly useful to allow the log file to be provided software developers so they can debug an issue.\nSee the following for information about logging exceptions:   https://www.loggly.com/blog/exceptional-logging-of-exceptions-in-python/  It is useful to print the exception stack trace.  See the following for information:    Python 2 -  https://docs.python.org/2/library/traceback.html    Python 3 -  https://docs.python.org/3/library/traceback.html    An example for how to print the exception stack trace is as follows\n(see  http://stackoverflow.com/questions/5191830/best-way-to-log-a-python-exception ):  import logging\ntry:\n    1/0\nexcept Exception as e:\n    logging.exception(\"Division by zero\")  The above  logging.exception  call will print the stack trace whereas  logging.warning  and  logging.error  will print a simple message.",
            "title": "Logging Exceptions"
        },
        {
            "location": "/documentation/",
            "text": "Documenting Python Code\n\n\nCode documentation is important to memorialize the knowledge about the code.\nCode that is not documented is more difficult to understand when maintaining and enhancing the code.\n\n\nInline Comments\n\n\nInline comments are simply comments in the code to document logic, explain variables, etc.\nThese comments should be used to annotate code so that the Python syntax is understandable.\nOne form of the comments is using the hash (\n#\n) character, for example:\n\n\n# Can use to provide a multi-line comment\n# or place comment after a statement as shown below.\na = 1 # Initialize a to first index\n\n\n\n\nMulti-line Quoted Commments\n\n\nMulti-line comments can also be specified using three single or double quotes surrounding the commented text.\nThe surrounding quotes must match.  For example:\n\n\n'''\nThis module prints a random number to the screen.\nThe range of values is -1.0 to 1.0.\n'''\n\n\n\n\nModule/Function/Class/Method Comments Using Docstrings\n\n\nA Docstring can be used to document a module, function, class, or method.\nThe Python interpreter sets the \n__doc__\n special attribute for the object to the Docstring and can therefore be used in \ninteractive development environment tools to display fundtion usage.\nSee the official specification: \nhttps://www.python.org/dev/peps/pep-0257/\n.\nThe following illustrates a simple example:\n\n\ndef max(a,b):\n  '''\n  Return the maximum of two numbers.\n\n  a -- the first number\n  b -- the second number\n\n  '''\n\n\n\n\nAutomating Code API Document Creation Using Sphinx\n\n\nThe Docstring specification, although useful, is basic.  It is often desirable to have more extensive documentation.\nThe Sphinx software (\nhttp://www.sphinx-doc.org/en/stable\n) is a tool to automate creation of HTML navigable documentation from code comments.\n\n\nMore guidance will be added later to explain how to use Sphinx.",
            "title": "Documenting Python Code"
        },
        {
            "location": "/documentation/#documenting-python-code",
            "text": "Code documentation is important to memorialize the knowledge about the code.\nCode that is not documented is more difficult to understand when maintaining and enhancing the code.",
            "title": "Documenting Python Code"
        },
        {
            "location": "/documentation/#inline-comments",
            "text": "Inline comments are simply comments in the code to document logic, explain variables, etc.\nThese comments should be used to annotate code so that the Python syntax is understandable.\nOne form of the comments is using the hash ( # ) character, for example:  # Can use to provide a multi-line comment\n# or place comment after a statement as shown below.\na = 1 # Initialize a to first index",
            "title": "Inline Comments"
        },
        {
            "location": "/documentation/#multi-line-quoted-commments",
            "text": "Multi-line comments can also be specified using three single or double quotes surrounding the commented text.\nThe surrounding quotes must match.  For example:  '''\nThis module prints a random number to the screen.\nThe range of values is -1.0 to 1.0.\n'''",
            "title": "Multi-line Quoted Commments"
        },
        {
            "location": "/documentation/#modulefunctionclassmethod-comments-using-docstrings",
            "text": "A Docstring can be used to document a module, function, class, or method.\nThe Python interpreter sets the  __doc__  special attribute for the object to the Docstring and can therefore be used in \ninteractive development environment tools to display fundtion usage.\nSee the official specification:  https://www.python.org/dev/peps/pep-0257/ .\nThe following illustrates a simple example:  def max(a,b):\n  '''\n  Return the maximum of two numbers.\n\n  a -- the first number\n  b -- the second number\n\n  '''",
            "title": "Module/Function/Class/Method Comments Using Docstrings"
        },
        {
            "location": "/documentation/#automating-code-api-document-creation-using-sphinx",
            "text": "The Docstring specification, although useful, is basic.  It is often desirable to have more extensive documentation.\nThe Sphinx software ( http://www.sphinx-doc.org/en/stable ) is a tool to automate creation of HTML navigable documentation from code comments.  More guidance will be added later to explain how to use Sphinx.",
            "title": "Automating Code API Document Creation Using Sphinx"
        },
        {
            "location": "/water-resources/",
            "text": "Python Tools for Water Resources\n\n\nThis section will be filled out as specific Python tools are utilized and developed by the Open Water Foundation.",
            "title": "Python Tools for Water Resources"
        },
        {
            "location": "/water-resources/#python-tools-for-water-resources",
            "text": "This section will be filled out as specific Python tools are utilized and developed by the Open Water Foundation.",
            "title": "Python Tools for Water Resources"
        }
    ]
}